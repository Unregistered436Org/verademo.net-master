# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

#pool:
#  vmImage: 'windows-latest'

pool:
  name: Hosted VS2017
  demands:
  - msbuild
  - visualstudio
  - vstest
  - java

steps:
- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.4.1'
  inputs:
    versionSpec: 4.4.1

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '$(Parameters.solution)'

- task: VSBuild@1
  displayName: 'Build solution **\*.sln'
  inputs:
    solution: '$(Parameters.solution)'
    msbuildArgs: '/p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)/" /p:DebugSymbols=true'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    clean: true
    maximumCpuCount: true

- task: VSTest@2
  displayName: 'VsTest - testAssemblies'
  inputs:
    testAssemblyVer2: |
     **\$(BuildConfiguration)\*test*.dll
     !**\obj\**
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    diagnosticsEnabled: True

- task: PublishSymbols@2
  displayName: 'Publish symbols path'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
  continueOnError: true

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- powershell: |
   Set-ExecutionPolicy AllSigned -Scope Process -Force
   $ProgressPreference = 'SilentlyContinue'
   iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1')); srcclr scan --allow-dirty
   
  displayName: 'SRCCLR Command Line Script'
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: ArchiveFiles@2
  displayName: 'Archive $(build.artifactstagingdirectory)'
  inputs:
    rootFolderOrFile: '$(build.artifactstagingdirectory)'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Verademo-net.zip'

- task: Veracode.veracode-vsts-build-extension.veracode-scanner-task.Veracode@2
  displayName: 'Upload and scan: $(Build.ArtifactStagingDirectory)/Verademo-net.zip'
  inputs:
    AnalysisService: 'API account'
    filepath: '$(Build.ArtifactStagingDirectory)/Verademo-net.zip'
    importResults: true

- task: Veracode.veracode-vsts-build-extension.veracode-flaw-importer-task.Veracode Flaw Importer@2
  displayName: 'Import flaws: $(system.teamProject) - '
  inputs:
    AnalysisService: 'API account'
    flawImportLimit: 5000